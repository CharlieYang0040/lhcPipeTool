import fdb

class DBManager:
    def __init__(self, dsn, user, password):
        self.dsn = dsn
        self.user = user
        self.password = password
        self.conn = None

    def connect(self):
        """데이터베이스에 연결"""
        try:
            self.conn = fdb.connect(
                dsn=self.dsn,
                user=self.user,
                password=self.password,
                charset='UTF8'  # 문자 인코딩 추가
            )
        except fdb.fbcore.DatabaseError as e:
            print(f"데이터베이스 연결 오류: {e}")
            raise

    def create_tables(self):
        """테이블 생성"""
        cursor = self.conn.cursor()
        
        tables = [
            # 프로젝트 테이블
            '''CREATE TABLE projects (
                id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            # 시퀀스 테이블
            '''CREATE TABLE sequences (
                id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                project_id INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (project_id) REFERENCES projects(id)
            )''',
            
            # 샷 테이블
            '''CREATE TABLE shots (
                id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                sequence_id INTEGER,
                status VARCHAR(50) DEFAULT 'in_progress',
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (sequence_id) REFERENCES sequences(id)
            )''',
            
            # 작업자 테이블
            '''CREATE TABLE workers (
                id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                email VARCHAR(255),
                department VARCHAR(100),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            # 버전 테이블
            '''CREATE TABLE versions (
                id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                shot_id INTEGER,
                version_number INTEGER NOT NULL,
                worker_id INTEGER,
                status VARCHAR(50) DEFAULT 'pending',
                file_path VARCHAR(1024),
                preview_path VARCHAR(1024),
                comment TEXT,
                is_latest BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (shot_id) REFERENCES shots(id),
                FOREIGN KEY (worker_id) REFERENCES workers(id)
            )'''
        ]
        
        for table_sql in tables:
            try:
                cursor.execute(table_sql)
                self.conn.commit()
            except fdb.fbcore.DatabaseError as e:
                # 테이블이 이미 존재하는 경우 무시
                if 'already exists' not in str(e):
                    raise

    def insert_worker(self, worker_name):
        """workers 테이블에 작업자 추가"""
        cursor = self.conn.cursor()
        cursor.execute('INSERT INTO workers (name) VALUES (?)', (worker_name,))
        self.conn.commit()

    def insert_version(self, shot_name, version, worker_name):
        """versions 테이블에 버전 정보 추가"""
        cursor = self.conn.cursor()
        cursor.execute('SELECT id FROM workers WHERE name = ?', (worker_name,))
        worker_id = cursor.fetchone()[0]
        cursor.execute('INSERT INTO versions (shot_name, version, worker_id) VALUES (?, ?, ?)', (shot_name, version, worker_id))
        self.conn.commit()

    def fetch_workers(self):
        """workers 테이블에서 모든 작업자 조회"""
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM workers')
        return cursor.fetchall()

    def fetch_versions(self):
        """versions 테이블에서 모든 버전 조회"""
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT v.shot_name, v.version, w.name AS worker, v.created_at
            FROM versions v
            JOIN workers w ON v.worker_id = w.id
        ''')
        return cursor.fetchall()

    def close(self):
        """데이터베이스 연결 종료"""
        if self.conn:
            self.conn.close()
